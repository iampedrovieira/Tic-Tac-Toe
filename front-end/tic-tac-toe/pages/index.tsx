import Head from "next/head";
import { useEffect, useState } from "react";
import styles from "../styles/Home.module.css";
import { Socket } from "socket.io-client";
import {
  connectSocket,
  emitSendPlayerInfo,
  onPlayersChange,
  onWaitingPlayer,
} from "./../libs/socketConnection";
import {
  onGameEnd,
  onGameStart,
  onPlayerAvailable,
  onPlayerMove,
} from "./../libs/SocketGame";

import PlayerListComponent from "./../Components/PlayersList/PlayerList";
import BoardComponent from "./../Components/Board/Board";
import CheckReadyModal from "./../Components/CheckReady/CheckReadyModal";
import InputNameModal from "./../Components/InputName/InputNameModal";

import Player from "Types/Player";
import Game from "Types/Game";
import Move from "Types/Move";

const Home = () => {
 
  const [socket, setSocket] = useState<Socket>();
  const [playerId, setPlayerId] = useState<String>();
  const [game, setGame] = useState<Game>();
  const [gameEnd,setGameEnd] = useState<Boolean>(false);
  const [message, setMessage] = useState<string>("Connecting to server");
  const [title, setTitle] = useState<string>("Waiting for the game to start");
  
  const [name, setName] = useState<string>("");
  const [hideNameBox, setHideNameBox] = useState<boolean>(true);
  const [hideCheckReadyBox, setHideCheckReadyBox] = useState<boolean>(false);
  const [checkBox, setCheckBox] = useState<boolean>(false);
  const [playersList, setPlayersList] = useState<Player[]>([]);

  useEffect(() => {
    async function connection() {
     const socketClient = await connectSocket();
      setSocket(socketClient)
    }
    connection();
  },[]);
  //This is run when player is connected to server
  useEffect(() => {
    //This create a listener to startGame entry.
    if (!socket) return;
    setPlayerId(socket.id);
    onPlayerAvailable(socket, setHideCheckReadyBox, setCheckBox);
    setHideNameBox(true);
    onWaitingPlayer(socket, setMessage);
    onPlayersChange(socket, setPlayersList);
    onGameEnd(socket,setMessage,setGameEnd);
    onGameStart(
      socket,
      setMessage,
      setGame,
      setHideCheckReadyBox,
      setGameEnd,
      setTitle,
      playerId
    );
    //player move
    onPlayerMove(socket,setGame,setMessage)    
  
  }, [socket]);

  function handleName(): void {
    if (!name) return;
    /*  
    //* Send name to sever and change the flow on back end to only stay in 'waiting' when name have been sended
    */
    if (!socket) return;
    emitSendPlayerInfo(socket, name);
    setHideNameBox(false);
  }

  function handleCheckBox() {
    if (!checkBox) {
      setCheckBox(!checkBox);
      socket?.emit("playerCheck");
    } else {
      setCheckBox(!checkBox);
      socket?.emit("playerUnCheck");
    }
  }

  function handleEmitMove(move:Move){
    socket!.emit("playerMove", move);
  }

  return (
    <div>
      <Head>
        <title>Tic Tac Toe Game</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className={styles.container}>
        <div className={styles.Title}> {title}</div>
        <div className={styles.Players}>
          <PlayerListComponent players={playersList} />
        </div>
        <div className={styles.Game}>
          { socket && game &&
            <BoardComponent game={game} socket={socket} setMessage = {setMessage} handleEmitMove={handleEmitMove} gameEnd={gameEnd}/>
          } 
        </div>
        <div className={styles.Result}> {message}</div>
      </div>
      <InputNameModal
        open={hideNameBox}
        setOpen={setHideNameBox}
        name={name}
        setName={setName}
        onHandleName={handleName}
      />
      <CheckReadyModal
        open={hideCheckReadyBox}
        setOpen={setHideCheckReadyBox}
        check={checkBox}
        onChangeCheck={handleCheckBox}
      />
    </div>
  );
};

export default Home;


interface intialprops{
  props:{
    socketClient:any
  }
}