import type { GetStaticProps, InferGetStaticPropsType, NextPage } from 'next'
import Head from 'next/head'
import { MouseEventHandler, useEffect, useState } from 'react'
import styles from '../styles/Home.module.css'
import { io, Socket} from "socket.io-client";



interface Player{
  Id?:String,
  Name?:String,
  Option:Number,
  wins:number;
  losses:number;
}

interface Game{
  'Player1':Player,
  'Player2':Player,
  'Play':string
  'gameState':number[][];
}
interface Move{
  positionX:number,
  positionY:number
}
interface ButtonConfig{
  'styles':string,
  'disable':boolean
}


interface InitalProps{
  socket:Socket,
  userId:string,
  status:boolean
}

const Home: NextPage = () => {
  
  const [player_1,setPlayer_1] = useState<Player>();
  const [player_2,setPlayer_2] = useState<Player>();
  const [playerId,setPlayerId] = useState<String>();
  const [disabledButtons,setDisabledButtons] = useState<boolean>(true);
  const [game,setGame] = useState<Game>();
  const [message,setMessage] = useState<string>('Connecting to server');
  const [socket,setSocket] = useState<Socket|null>(null);

  const [buttonsState,setButtonsState]=useState<ButtonConfig[][]>(
    [
      [{'styles':styles.button,'disable':false},{'styles':styles.button,'disable':false},{'styles':styles.button,'disable':false}],
      [{'styles':styles.button,'disable':false},{'styles':styles.button,'disable':false},{'styles':styles.button,'disable':false}],
      [{'styles':styles.button,'disable':false},{'styles':styles.button,'disable':false},{'styles':styles.button,'disable':false}]
    ]);
  
  //On first run
  useEffect(() => {
    const socket:Socket = io("http://localhost:8080");
    socket.on("connect", async () => {
      console.log("Connectou");
      socket.on("yourId",(userId)=>{
        setPlayerId(userId);
        setMessage('Waitting for player!');
        setSocket(socket)
        return;
      })
  });
  setMessage('Connecting...');
  },[]);

  //This is run when player id changed
  useEffect(() => {
    //This create a listenr to startGame entry.
    if(!socket)return;

    socket.on("startGame",(data:Game)=>{
      //Set data into gameState
      setGame(data);
      //Verify if the user
      if(data.Play!=playerId){
        setMessage("It's your time to play");
        
        //Block the buttons when exist in data

      }else{
        //Block all buttons
        setButtonsState(
          [
            [{'styles':styles.button,'disable':true},{'styles':styles.button,'disable':true},{'styles':styles.button,'disable':true}],
            [{'styles':styles.button,'disable':true},{'styles':styles.button,'disable':true},{'styles':styles.button,'disable':true}],
            [{'styles':styles.button,'disable':true},{'styles':styles.button,'disable':true},{'styles':styles.button,'disable':true}]
          ])
        setMessage("Wait for other player move");
      }
    })

    
    // Finish Listener
    socket.on("finish",(winner:string)=>{

      // * [TEMP] DÃ¡ restart ao jogo
      // TODO Falta atualzar o gameState
      setButtonsState(
        [
          [{'styles':styles.button,'disable':false},{'styles':styles.button,'disable':false},{'styles':styles.button,'disable':false}],
          [{'styles':styles.button,'disable':false},{'styles':styles.button,'disable':false},{'styles':styles.button,'disable':false}],
          [{'styles':styles.button,'disable':false},{'styles':styles.button,'disable':false},{'styles':styles.button,'disable':false}]
        ]);
    });
  
  },[socket]);

  function handleButton(positionX:number,positionY:number):void{
    if(buttonsState[positionX][positionY].disable) return;
    let newButtonState = buttonsState;
    if(player_1?.Option==0)newButtonState[positionX][positionY].styles=styles.player1;
    if(player_1?.Option==1)newButtonState[positionX][positionY].styles=styles.player1;
    newButtonState[positionX][positionY].disable=true;
    setButtonsState(newButtonState);
    
    // TODO Change gameState

    const move:Move ={positionX,positionY}
    socket?.emit('playerMove',socket,move);
  
  }

  return (
    <div >
      <Head>
        <title>Tic Tac Toe Game</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className={styles.game}>
        <div className={styles.line}>
          <button disabled={buttonsState[0][0].disable} className={buttonsState[0][0].styles} onClick={()=>handleButton(0,0)} ></button>
          <button disabled={buttonsState[0][1].disable} className={buttonsState[0][1].styles} onClick={()=>handleButton(0,1)} ></button>
          <button disabled={buttonsState[0][2].disable} className={buttonsState[0][2].styles} onClick={()=>handleButton(0,2)}></button>
        </div>
        <div className={styles.line}>
          <button disabled={buttonsState[1][0].disable} className={buttonsState[1][0].styles} onClick={()=>handleButton(1,0)} ></button>
          <button disabled={buttonsState[1][1].disable} className={buttonsState[1][1].styles} onClick={()=>handleButton(1,1)} ></button>
          <button disabled={buttonsState[1][2].disable} className={buttonsState[1][2].styles} onClick={()=>handleButton(1,2)}></button>
        </div>
        <div className={styles.line}>
          <button disabled={buttonsState[2][0].disable} className={buttonsState[2][0].styles} onClick={()=>handleButton(2,0)} ></button>
          <button disabled={buttonsState[2][1].disable} className={buttonsState[2][1].styles} onClick={()=>handleButton(2,1)} ></button>
          <button disabled={buttonsState[2][2].disable} className={buttonsState[2][2].styles} onClick={()=>handleButton(2,2)}></button>
        </div>
      </div>
      <h1>{message}</h1>
    </div>
  )
}

// This gets called on every request

export const getStaticProps = async () => {
  return {props:{
  } 
  } 
}

export default Home;