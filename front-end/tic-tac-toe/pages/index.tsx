import type { GetStaticProps, InferGetStaticPropsType, NextPage } from 'next'
import Head from 'next/head'
import { MouseEventHandler, useEffect, useState } from 'react'
import styles from '../styles/Home.module.css'
import { io, Socket} from "socket.io-client";
import { loadGetInitialProps } from 'next/dist/shared/lib/utils';


interface Player{
  Id?:String,
  Name?:String,
  Option:Number
}

interface Game{
  'Player1':Player,
  'Player2':Player,
  'Play':string
  '1x1':Number,
  '1x2':Number,
  '1x3':Number,
  '2x1':Number,
  '2x2':Number,
  '2x3':Number,
  '3x1':Number,
  '3x2':Number,
  '3x3':Number
}

interface ButtonConfig{
  'styles':string,
  'disable':boolean
}
interface ButtonState{
  '1x1':ButtonConfig,
  '1x2':ButtonConfig,
  '1x3':ButtonConfig,
  '2x1':ButtonConfig,
  '2x2':ButtonConfig,
  '2x3':ButtonConfig,
  '3x1':ButtonConfig,
  '3x2':ButtonConfig,
  '3x3':ButtonConfig
}

interface InitalProps{
  socket:Socket,
  userId:string,
  status:boolean
}

const Home: NextPage = () => {
  
  const [player_1,setPlayer_1] = useState<Player>();
  const [player_2,setPlayer_2] = useState<Player>();
  const [playerId,setPlayerId] = useState<String>();
  const [disabledButtons,setDisabledButtons] = useState<boolean>(true);
  const [game,setGame] = useState<Game>();
  const [message,setMessage] = useState<string>('Connecting to server');
  const [socket,setSocket] = useState<Socket|null>(null);

  const [buttonsState,setButtonsState]=useState<ButtonState>(
  {
    '1x1':{'styles':styles.button,'disable':false},
    '1x2':{'styles':styles.button,'disable':false},
    '1x3':{'styles':styles.button,'disable':false},
    '2x1':{'styles':styles.button,'disable':false},
    '2x2':{'styles':styles.button,'disable':false},
    '2x3':{'styles':styles.button,'disable':false},
    '3x1':{'styles':styles.button,'disable':false},
    '3x2':{'styles':styles.button,'disable':false},
    '3x3':{'styles':styles.button,'disable':false}
  });
  
  //On first run
  useEffect(() => {
    const socket:Socket = io("http://localhost:8080");
    socket.on("connect", async () => {
      console.log("Connectou");
      socket.on("yourId",(userId)=>{
        setPlayerId(userId);
        setMessage('Waitting for player!');
        setSocket(socket)
        return;
      })
  });
  setMessage('Connecting...');
  },[]);

  //This is run when player id changed
  useEffect(() => {
    //This create a listenr to startGame entry.
    if(!socket)return;
  
    socket!.on("startGame",(data:Game)=>{
      console.log('game started')
      //Set data into gameState
      setGame(data);
      
      //Verify if the user
      if(data.Play!=playerId){
        setMessage("It's your time to play");
        
        //Block the buttons when exist in data
        
      }else{
        //Block all buttons
        setButtonsState({
          '1x1':{'styles':styles.button,'disable':true},
          '1x2':{'styles':styles.button,'disable':true},
          '1x3':{'styles':styles.button,'disable':true},
          '2x1':{'styles':styles.button,'disable':true},
          '2x2':{'styles':styles.button,'disable':true},
          '2x3':{'styles':styles.button,'disable':true},
          '3x1':{'styles':styles.button,'disable':true},
          '3x2':{'styles':styles.button,'disable':true},
          '3x3':{'styles':styles.button,'disable':true}
        })
        setMessage("Wait for other player move");
      }
    })
  },[socket]);



  function handleButton(position:keyof ButtonState):void{
    if(buttonsState[position].disable) return;
    let newButtonState:ButtonState = Object.assign({}, buttonsState);
    newButtonState[position].styles=styles.player1;
    newButtonState[position].disable=true;
    setButtonsState(newButtonState);
  
  }

  return (
    <div >
      <Head>
        <title>Tic Tac Toe Game</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className={styles.game}>
        <div className={styles.line}>
          <button disabled={buttonsState['1x1'].disable} className={buttonsState['1x1'].styles} onClick={()=>handleButton('1x1')} ></button>
          <button disabled={buttonsState['1x2'].disable} className={buttonsState['1x2'].styles} onClick={()=>handleButton('1x2')} ></button>
          <button disabled={buttonsState['1x3'].disable} className={buttonsState['1x3'].styles} onClick={()=>handleButton('1x3')}></button>
        </div>
        <div className={styles.line}>
          <button disabled={buttonsState['2x1'].disable} className={buttonsState['2x1'].styles} onClick={()=>handleButton('2x1')}></button>
          <button disabled={buttonsState['2x2'].disable} className={buttonsState['2x2'].styles} onClick={()=>handleButton('2x2')}></button>
          <button disabled={buttonsState['2x3'].disable} className={buttonsState['2x3'].styles} onClick={()=>handleButton('2x3')}></button>
        </div>
        <div className={styles.line}>
          <button disabled={buttonsState['3x1'].disable} className={buttonsState['3x1'].styles} onClick={()=>handleButton('3x1')}></button>
          <button disabled={buttonsState['3x2'].disable} className={buttonsState['3x3'].styles} onClick={()=>handleButton('3x2')}></button>
          <button disabled={buttonsState['3x3'].disable} className={buttonsState['3x3'].styles} onClick={()=>handleButton('3x3')}></button>
        </div>
      </div>
      <h1>{message}</h1>
    </div>
  )
}

// This gets called on every request

export const getStaticProps = async () => {
  return {props:{
  } 
  } 
}

export default Home;